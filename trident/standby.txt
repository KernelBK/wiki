
<pre> <code class="">
cd /home/jinglun/h1/trident/sdk/target/build/linux/sub-systems/standby
 make m3_start

/home/jinglun/h1/trident/sdk/target/src/sd/standby/firmware/comps/m3_start
/home/jinglun/h1/trident/sdk/target/build/linux/sub-systems/standby
/home/jinglun/h1/trident/sdk/target/output/objs/summit-dualhd_license_free-gnu-4.4.0-linux-debug/comps/tmscsScf_Core/bin/armgnu_nullos_static_el_cortex-m3_g_flo_linux_mp_


/home/jinglun/h1/trident/sdk/target/src/sd/standby/drivers/comps/tmscsScd
/home/jinglun/h1/trident/sdk/target/src/sd/standby/lnxDrv/comps/lnxscsDrv

RST_STANDBY_REG E06E6004

STBYCTL

ARM Cortex-M3, 64kB Instruction RAM, 8kB Data RAM
The Instruction RAM is writeable by the host controller so the CM3 code can be uploaded or reprogrammed at any time by the host.
The Cortex-M3 has a fixed memory map

The Instruction RAM uses 64kB located at base address 0xE0690000, 
the Data RAM uses 8kB located at base address 0xE06A0000, 
the configuration registers use 4kB at base address 0xE06A2000.


internal_scd_handle_pm_command

cnxt_scd_os_enter_standby
	pm_suspend
		enter_state


      /* Go into sleep mode, to be woken up by any interrupt */                                                         
      asm("wfi");   

tmscsScf.bin -> tmscsSc_Firmware.c 
const u_int32 uSCFirmware[] =
const u_int32 uSCFirmwareSize = sizeof(uSCFirmware);

cnxt_scd_init
	cnxt_kal_thread_create	(PFNTHREAD)scd_main_thread
	internal_scd_init
		cnxt_scd_os_register (向内核注册待机结构体)
		internal_scd_clk_init 
		internal_scd_is_scf_running
		internal_scd_initialize_scf  (载入M3的FW,复位M3)
		internal_scd_scf_post_command

#define SC_IRAM_           0xE0690000 
#define SC_IPC_BASE            0xE06A1C00 /* Top of M3 DRAM - 1KB */


scd_main_thread
	internal_scd_process_thread_command
发命令和收命令只是一个摆设，没有真的实现。



M3复位
0xE06E600C
md 0xE06E600C 1
04080080
mw.l 0xE06E600C 0x04080080
mw.l 0xE06E600C 0x04000080

tftp 0xE0690000 m3_start.bin
md 0xE0690000 0x10
md 0xE06a0000 0x20

md 0xE06A1C0C 1
mw.l 0xE06A1C0C 0x0

md 0xE06A2000 1
mw.l 0xE06A2000 0x0

看m3是否运行
md 0xE06A1C0C 1

M3中的执行流程：
systa中的功耗管理
/workspace/trident/apollo_sdk_standby/target/src/sd/apps/systa/comps/systaApp

main
	cnxt_kal_application_entry
		cnxt_kal_thread_create
			system_test_main	
				system_test_init
				system_manual_tests
					sys_manual_standby_test_entry
						cnxt_scd_change_pm_state
							internal_scd_execute_standby_state_machine
								internal_scd_handle_pm_command
									internal_scd_post_pm_events
										internal_scd_notify_all_unit_clients
											(CallbackInfo[iNumCallbacks].pfnNotify)
								cnxt_scd_os_enter_standby
									pm_suspend
								internal_scd_suspend
									internal_scd_set_pm_state
										internal_scd_save_context
										internal_scd_prepare_scf_for_standby_mode
										internal_scd_scf_post_command


The stand-by controller driver module on the application CPU communicates to the Cortex-M3 stand-by controller firmware module using IPC drivers.

-----
uloader
EntryPoint
	scf_nvic_init
	Main
		scf_init
			scf_uart_init
				internal_scf_uart_init
			scf_kal_initialize
				hwlib_timer_initialise
					scf_timers   (3个定时器)
					stop_hw_timer
					scf_nvic_int_enable
						NVIC_IRQ_SET_INT
						NVIC_IRQ_CLR_INT
			internal_scf_ipc_init (access IPC registers for communication with A9 )
			scf_gmac_init
			scf_irrx_init
			scf_uhf_init
		internal_scf_change_state
			internal_scf_enter_active_standby
			internal_scf_enter_passive_standby
		internal_scf_exit_standby
		asm("wfi"); 


m3_start
perl /home/jinglun/h1/trident/sdk/target/src/sde/scripts/build_exe.pl .

never reset的寄存器 E06EAD00
never reset. Each register will retain its value as long as power is applied.
Scratch Register (SCR)
p186.
md 0xE06EAD00 1

nand read 0x100000 0x80000
md 0x60000
md 0x006b8c0
saveenv 
Saving Environment to NAND...
Erasing Nand...
Erasing at 0x160000 -- 100% complete.
Writing to Nand... done

tftp 0x100000 m3_start.bin

0xE06A1C00

只更新m3的开机固件。
tftp m3_start.bin&& nand erase 0x160000 0x20000;nand write 0x160000 0x20000
setenv m3 "tftp m3_start.bin&& nand erase 0x160000 0x20000;nand write 0x160000 0x20000;mw.l 0xE06EAD00 1234;reset"

kernel
sys_reboot
	kernel_power_off
		machine_power_off
			pm_power_off


复位m3
mw.l 0xE06A2000 1; mw.l 0xE06A2000 0

</code> </pre>
